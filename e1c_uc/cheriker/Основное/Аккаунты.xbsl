импорт СистемаПравДоступа


@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат [
        новый РазрешениеДоступа(
            [
                новый КлючДоступаАккаунта.Объект(РолиАккаунта.Модератор),
                новый КлючДоступаАккаунта.Объект(РолиАккаунта.Наблюдатель),
                новый КлючДоступаАккаунта.Объект(РолиАккаунта.Редактор)
            ],
            [
                Сущность.Право.Изменение
            ]
        )
    ]
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Объекты: ЧитаемыйМассив<Аккаунты.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<Аккаунты.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения = <Аккаунты.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>{:}
    
    для ДанныеРасчета из Объекты
        Разрешения.Вставить(
            ДанныеРасчета,
            // массив разрешений доступа <Массив<КлючДоступа>, <Право>>
            [
                новый РазрешениеДоступа(
                    [
                        новый КлючДоступаАккаунта.Объект(РолиАккаунта.Модератор),
                        новый КлючДоступаПользователя.Объект(ДанныеРасчета.Пользователь)
                    ],
                    [
                        Сущность.Право.Изменение
                    ]
                )
                
            ]
        )    
    ; 
    
    возврат Разрешения
;

@ВПроекте
метод ПользователиПоРолямАккаунта(
        СписокПользователей: Массив<Пользователи.Ссылка>
    ): Соответствие<РолиАккаунта, Массив<Пользователи.Ссылка>>

    знч Результат = <РолиАккаунта, Массив<Пользователи.Ссылка>>{:}
    
    для РольАккаунта из РолиАккаунта.Элементы()
        Результат.Вставить(РольАккаунта, [])    
    ;
    
    знч Запрос = Запрос{
        ВЫБРАТЬ
            Аккаунты.Пользователь КАК Пользователь,
            Аккаунты.Роль КАК Роль
        ИЗ
            Аккаунты КАК Аккаунты
        ГДЕ
            Аккаунты.Пользователь В (%СписокПользователей)
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    РезультатЗапроса.ДляКаждого(Элемент -> Результат[Элемент.Роль].Добавить(Элемент.Пользователь))
    
    возврат Результат    
;


@ВПроекте @НаСервере @ДоступноСКлиента
метод АккаунтПользователя(Пользователь: Пользователи.Ссылка? = Неопределено): Аккаунты.Ссылка?
    если Пользователь == Неопределено
        Пользователь = Пользователи.ТекущийПользователь
    ;
    
    знч Запрос = Запрос{
        ВЫБРАТЬ
            Аккаунты.Ссылка КАК Ссылка
        ИЗ
            Аккаунты КАК Аккаунты
        ГДЕ
            Аккаунты.Пользователь == %Пользователь
    }
    
    исп Результат = Запрос.Выполнить()
    
    возврат Результат.ПервыйИлиУмолчание()?.Ссылка  
;

@ВПроекте @НаСервере @ДоступноСКлиента
метод РольПользователя(): Строка
    знч ТекущийАккаунт = АккаунтПользователя()
    если ТекущийАккаунт == Неопределено
        возврат ""    
    иначе
        возврат ТекущийАккаунт.ЗагрузитьОбъект().Роль.ВСтроку()    
    ;      
;

@Подписка(Событие{Пользователи.Объект.ПослеПодключения})
метод ИнициализацияАккаунта(Источник: Пользователи.Объект)
    если АккаунтПользователя(Источник.Ссылка) == Неопределено
        знч НовыйАккаунт = новый Аккаунты.Объект()
        НовыйАккаунт.Пользователь = Источник.Ссылка
        НовыйАккаунт.Наименование = ПользователиСервиса.Найти(Источник.Ид).Логин
        НовыйАккаунт.Записать()
    ;    
;